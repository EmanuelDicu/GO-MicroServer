// Code generated by ent, DO NOT EDIT.

package city

import (
	"tema-sprc-go/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.City {
	return predicate.City(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.City {
	return predicate.City(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.City {
	return predicate.City(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.City {
	return predicate.City(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.City {
	return predicate.City(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.City {
	return predicate.City(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.City {
	return predicate.City(sql.FieldLTE(FieldID, id))
}

// IDTara applies equality check predicate on the "id_tara" field. It's identical to IDTaraEQ.
func IDTara(v int) predicate.City {
	return predicate.City(sql.FieldEQ(FieldIDTara, v))
}

// NumeOras applies equality check predicate on the "Nume_oras" field. It's identical to NumeOrasEQ.
func NumeOras(v string) predicate.City {
	return predicate.City(sql.FieldEQ(FieldNumeOras, v))
}

// Latitudine applies equality check predicate on the "Latitudine" field. It's identical to LatitudineEQ.
func Latitudine(v float64) predicate.City {
	return predicate.City(sql.FieldEQ(FieldLatitudine, v))
}

// Longitudine applies equality check predicate on the "Longitudine" field. It's identical to LongitudineEQ.
func Longitudine(v float64) predicate.City {
	return predicate.City(sql.FieldEQ(FieldLongitudine, v))
}

// IDTaraEQ applies the EQ predicate on the "id_tara" field.
func IDTaraEQ(v int) predicate.City {
	return predicate.City(sql.FieldEQ(FieldIDTara, v))
}

// IDTaraNEQ applies the NEQ predicate on the "id_tara" field.
func IDTaraNEQ(v int) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldIDTara, v))
}

// IDTaraIn applies the In predicate on the "id_tara" field.
func IDTaraIn(vs ...int) predicate.City {
	return predicate.City(sql.FieldIn(FieldIDTara, vs...))
}

// IDTaraNotIn applies the NotIn predicate on the "id_tara" field.
func IDTaraNotIn(vs ...int) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldIDTara, vs...))
}

// IDTaraGT applies the GT predicate on the "id_tara" field.
func IDTaraGT(v int) predicate.City {
	return predicate.City(sql.FieldGT(FieldIDTara, v))
}

// IDTaraGTE applies the GTE predicate on the "id_tara" field.
func IDTaraGTE(v int) predicate.City {
	return predicate.City(sql.FieldGTE(FieldIDTara, v))
}

// IDTaraLT applies the LT predicate on the "id_tara" field.
func IDTaraLT(v int) predicate.City {
	return predicate.City(sql.FieldLT(FieldIDTara, v))
}

// IDTaraLTE applies the LTE predicate on the "id_tara" field.
func IDTaraLTE(v int) predicate.City {
	return predicate.City(sql.FieldLTE(FieldIDTara, v))
}

// NumeOrasEQ applies the EQ predicate on the "Nume_oras" field.
func NumeOrasEQ(v string) predicate.City {
	return predicate.City(sql.FieldEQ(FieldNumeOras, v))
}

// NumeOrasNEQ applies the NEQ predicate on the "Nume_oras" field.
func NumeOrasNEQ(v string) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldNumeOras, v))
}

// NumeOrasIn applies the In predicate on the "Nume_oras" field.
func NumeOrasIn(vs ...string) predicate.City {
	return predicate.City(sql.FieldIn(FieldNumeOras, vs...))
}

// NumeOrasNotIn applies the NotIn predicate on the "Nume_oras" field.
func NumeOrasNotIn(vs ...string) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldNumeOras, vs...))
}

// NumeOrasGT applies the GT predicate on the "Nume_oras" field.
func NumeOrasGT(v string) predicate.City {
	return predicate.City(sql.FieldGT(FieldNumeOras, v))
}

// NumeOrasGTE applies the GTE predicate on the "Nume_oras" field.
func NumeOrasGTE(v string) predicate.City {
	return predicate.City(sql.FieldGTE(FieldNumeOras, v))
}

// NumeOrasLT applies the LT predicate on the "Nume_oras" field.
func NumeOrasLT(v string) predicate.City {
	return predicate.City(sql.FieldLT(FieldNumeOras, v))
}

// NumeOrasLTE applies the LTE predicate on the "Nume_oras" field.
func NumeOrasLTE(v string) predicate.City {
	return predicate.City(sql.FieldLTE(FieldNumeOras, v))
}

// NumeOrasContains applies the Contains predicate on the "Nume_oras" field.
func NumeOrasContains(v string) predicate.City {
	return predicate.City(sql.FieldContains(FieldNumeOras, v))
}

// NumeOrasHasPrefix applies the HasPrefix predicate on the "Nume_oras" field.
func NumeOrasHasPrefix(v string) predicate.City {
	return predicate.City(sql.FieldHasPrefix(FieldNumeOras, v))
}

// NumeOrasHasSuffix applies the HasSuffix predicate on the "Nume_oras" field.
func NumeOrasHasSuffix(v string) predicate.City {
	return predicate.City(sql.FieldHasSuffix(FieldNumeOras, v))
}

// NumeOrasEqualFold applies the EqualFold predicate on the "Nume_oras" field.
func NumeOrasEqualFold(v string) predicate.City {
	return predicate.City(sql.FieldEqualFold(FieldNumeOras, v))
}

// NumeOrasContainsFold applies the ContainsFold predicate on the "Nume_oras" field.
func NumeOrasContainsFold(v string) predicate.City {
	return predicate.City(sql.FieldContainsFold(FieldNumeOras, v))
}

// LatitudineEQ applies the EQ predicate on the "Latitudine" field.
func LatitudineEQ(v float64) predicate.City {
	return predicate.City(sql.FieldEQ(FieldLatitudine, v))
}

// LatitudineNEQ applies the NEQ predicate on the "Latitudine" field.
func LatitudineNEQ(v float64) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldLatitudine, v))
}

// LatitudineIn applies the In predicate on the "Latitudine" field.
func LatitudineIn(vs ...float64) predicate.City {
	return predicate.City(sql.FieldIn(FieldLatitudine, vs...))
}

// LatitudineNotIn applies the NotIn predicate on the "Latitudine" field.
func LatitudineNotIn(vs ...float64) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldLatitudine, vs...))
}

// LatitudineGT applies the GT predicate on the "Latitudine" field.
func LatitudineGT(v float64) predicate.City {
	return predicate.City(sql.FieldGT(FieldLatitudine, v))
}

// LatitudineGTE applies the GTE predicate on the "Latitudine" field.
func LatitudineGTE(v float64) predicate.City {
	return predicate.City(sql.FieldGTE(FieldLatitudine, v))
}

// LatitudineLT applies the LT predicate on the "Latitudine" field.
func LatitudineLT(v float64) predicate.City {
	return predicate.City(sql.FieldLT(FieldLatitudine, v))
}

// LatitudineLTE applies the LTE predicate on the "Latitudine" field.
func LatitudineLTE(v float64) predicate.City {
	return predicate.City(sql.FieldLTE(FieldLatitudine, v))
}

// LongitudineEQ applies the EQ predicate on the "Longitudine" field.
func LongitudineEQ(v float64) predicate.City {
	return predicate.City(sql.FieldEQ(FieldLongitudine, v))
}

// LongitudineNEQ applies the NEQ predicate on the "Longitudine" field.
func LongitudineNEQ(v float64) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldLongitudine, v))
}

// LongitudineIn applies the In predicate on the "Longitudine" field.
func LongitudineIn(vs ...float64) predicate.City {
	return predicate.City(sql.FieldIn(FieldLongitudine, vs...))
}

// LongitudineNotIn applies the NotIn predicate on the "Longitudine" field.
func LongitudineNotIn(vs ...float64) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldLongitudine, vs...))
}

// LongitudineGT applies the GT predicate on the "Longitudine" field.
func LongitudineGT(v float64) predicate.City {
	return predicate.City(sql.FieldGT(FieldLongitudine, v))
}

// LongitudineGTE applies the GTE predicate on the "Longitudine" field.
func LongitudineGTE(v float64) predicate.City {
	return predicate.City(sql.FieldGTE(FieldLongitudine, v))
}

// LongitudineLT applies the LT predicate on the "Longitudine" field.
func LongitudineLT(v float64) predicate.City {
	return predicate.City(sql.FieldLT(FieldLongitudine, v))
}

// LongitudineLTE applies the LTE predicate on the "Longitudine" field.
func LongitudineLTE(v float64) predicate.City {
	return predicate.City(sql.FieldLTE(FieldLongitudine, v))
}

// HasTemperatures applies the HasEdge predicate on the "Temperatures" edge.
func HasTemperatures() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TemperaturesTable, TemperaturesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemperaturesWith applies the HasEdge predicate on the "Temperatures" edge with a given conditions (other predicates).
func HasTemperaturesWith(preds ...predicate.Temperature) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		step := newTemperaturesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.City) predicate.City {
	return predicate.City(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.City) predicate.City {
	return predicate.City(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.City) predicate.City {
	return predicate.City(sql.NotPredicates(p))
}
