// Code generated by ent, DO NOT EDIT.

package city

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the city type in the database.
	Label = "city"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIDTara holds the string denoting the id_tara field in the database.
	FieldIDTara = "id_tara"
	// FieldNumeOras holds the string denoting the nume_oras field in the database.
	FieldNumeOras = "nume_oras"
	// FieldLatitudine holds the string denoting the latitudine field in the database.
	FieldLatitudine = "latitudine"
	// FieldLongitudine holds the string denoting the longitudine field in the database.
	FieldLongitudine = "longitudine"
	// EdgeTemperatures holds the string denoting the temperatures edge name in mutations.
	EdgeTemperatures = "Temperatures"
	// Table holds the table name of the city in the database.
	Table = "cities"
	// TemperaturesTable is the table that holds the Temperatures relation/edge.
	TemperaturesTable = "temperatures"
	// TemperaturesInverseTable is the table name for the Temperature entity.
	// It exists in this package in order to avoid circular dependency with the "temperature" package.
	TemperaturesInverseTable = "temperatures"
	// TemperaturesColumn is the table column denoting the Temperatures relation/edge.
	TemperaturesColumn = "id_oras"
)

// Columns holds all SQL columns for city fields.
var Columns = []string{
	FieldID,
	FieldIDTara,
	FieldNumeOras,
	FieldLatitudine,
	FieldLongitudine,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"id_tara",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the City queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIDTara orders the results by the id_tara field.
func ByIDTara(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDTara, opts...).ToFunc()
}

// ByNumeOras orders the results by the Nume_oras field.
func ByNumeOras(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumeOras, opts...).ToFunc()
}

// ByLatitudine orders the results by the Latitudine field.
func ByLatitudine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitudine, opts...).ToFunc()
}

// ByLongitudine orders the results by the Longitudine field.
func ByLongitudine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitudine, opts...).ToFunc()
}

// ByTemperaturesCount orders the results by Temperatures count.
func ByTemperaturesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTemperaturesStep(), opts...)
	}
}

// ByTemperatures orders the results by Temperatures terms.
func ByTemperatures(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTemperaturesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTemperaturesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TemperaturesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TemperaturesTable, TemperaturesColumn),
	)
}
