// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tema-sprc-go/ent/predicate"
	"tema-sprc-go/ent/temperature"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TemperatureUpdate is the builder for updating Temperature entities.
type TemperatureUpdate struct {
	config
	hooks    []Hook
	mutation *TemperatureMutation
}

// Where appends a list predicates to the TemperatureUpdate builder.
func (tu *TemperatureUpdate) Where(ps ...predicate.Temperature) *TemperatureUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetIDOras sets the "id_oras" field.
func (tu *TemperatureUpdate) SetIDOras(i int) *TemperatureUpdate {
	tu.mutation.ResetIDOras()
	tu.mutation.SetIDOras(i)
	return tu
}

// SetNillableIDOras sets the "id_oras" field if the given value is not nil.
func (tu *TemperatureUpdate) SetNillableIDOras(i *int) *TemperatureUpdate {
	if i != nil {
		tu.SetIDOras(*i)
	}
	return tu
}

// AddIDOras adds i to the "id_oras" field.
func (tu *TemperatureUpdate) AddIDOras(i int) *TemperatureUpdate {
	tu.mutation.AddIDOras(i)
	return tu
}

// SetValoare sets the "Valoare" field.
func (tu *TemperatureUpdate) SetValoare(f float64) *TemperatureUpdate {
	tu.mutation.ResetValoare()
	tu.mutation.SetValoare(f)
	return tu
}

// SetNillableValoare sets the "Valoare" field if the given value is not nil.
func (tu *TemperatureUpdate) SetNillableValoare(f *float64) *TemperatureUpdate {
	if f != nil {
		tu.SetValoare(*f)
	}
	return tu
}

// AddValoare adds f to the "Valoare" field.
func (tu *TemperatureUpdate) AddValoare(f float64) *TemperatureUpdate {
	tu.mutation.AddValoare(f)
	return tu
}

// SetTimestamp sets the "Timestamp" field.
func (tu *TemperatureUpdate) SetTimestamp(t time.Time) *TemperatureUpdate {
	tu.mutation.SetTimestamp(t)
	return tu
}

// SetNillableTimestamp sets the "Timestamp" field if the given value is not nil.
func (tu *TemperatureUpdate) SetNillableTimestamp(t *time.Time) *TemperatureUpdate {
	if t != nil {
		tu.SetTimestamp(*t)
	}
	return tu
}

// Mutation returns the TemperatureMutation object of the builder.
func (tu *TemperatureUpdate) Mutation() *TemperatureMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TemperatureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TemperatureUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TemperatureUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TemperatureUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TemperatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(temperature.Table, temperature.Columns, sqlgraph.NewFieldSpec(temperature.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.IDOras(); ok {
		_spec.SetField(temperature.FieldIDOras, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedIDOras(); ok {
		_spec.AddField(temperature.FieldIDOras, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Valoare(); ok {
		_spec.SetField(temperature.FieldValoare, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedValoare(); ok {
		_spec.AddField(temperature.FieldValoare, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Timestamp(); ok {
		_spec.SetField(temperature.FieldTimestamp, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temperature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TemperatureUpdateOne is the builder for updating a single Temperature entity.
type TemperatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TemperatureMutation
}

// SetIDOras sets the "id_oras" field.
func (tuo *TemperatureUpdateOne) SetIDOras(i int) *TemperatureUpdateOne {
	tuo.mutation.ResetIDOras()
	tuo.mutation.SetIDOras(i)
	return tuo
}

// SetNillableIDOras sets the "id_oras" field if the given value is not nil.
func (tuo *TemperatureUpdateOne) SetNillableIDOras(i *int) *TemperatureUpdateOne {
	if i != nil {
		tuo.SetIDOras(*i)
	}
	return tuo
}

// AddIDOras adds i to the "id_oras" field.
func (tuo *TemperatureUpdateOne) AddIDOras(i int) *TemperatureUpdateOne {
	tuo.mutation.AddIDOras(i)
	return tuo
}

// SetValoare sets the "Valoare" field.
func (tuo *TemperatureUpdateOne) SetValoare(f float64) *TemperatureUpdateOne {
	tuo.mutation.ResetValoare()
	tuo.mutation.SetValoare(f)
	return tuo
}

// SetNillableValoare sets the "Valoare" field if the given value is not nil.
func (tuo *TemperatureUpdateOne) SetNillableValoare(f *float64) *TemperatureUpdateOne {
	if f != nil {
		tuo.SetValoare(*f)
	}
	return tuo
}

// AddValoare adds f to the "Valoare" field.
func (tuo *TemperatureUpdateOne) AddValoare(f float64) *TemperatureUpdateOne {
	tuo.mutation.AddValoare(f)
	return tuo
}

// SetTimestamp sets the "Timestamp" field.
func (tuo *TemperatureUpdateOne) SetTimestamp(t time.Time) *TemperatureUpdateOne {
	tuo.mutation.SetTimestamp(t)
	return tuo
}

// SetNillableTimestamp sets the "Timestamp" field if the given value is not nil.
func (tuo *TemperatureUpdateOne) SetNillableTimestamp(t *time.Time) *TemperatureUpdateOne {
	if t != nil {
		tuo.SetTimestamp(*t)
	}
	return tuo
}

// Mutation returns the TemperatureMutation object of the builder.
func (tuo *TemperatureUpdateOne) Mutation() *TemperatureMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TemperatureUpdate builder.
func (tuo *TemperatureUpdateOne) Where(ps ...predicate.Temperature) *TemperatureUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TemperatureUpdateOne) Select(field string, fields ...string) *TemperatureUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Temperature entity.
func (tuo *TemperatureUpdateOne) Save(ctx context.Context) (*Temperature, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TemperatureUpdateOne) SaveX(ctx context.Context) *Temperature {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TemperatureUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TemperatureUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TemperatureUpdateOne) sqlSave(ctx context.Context) (_node *Temperature, err error) {
	_spec := sqlgraph.NewUpdateSpec(temperature.Table, temperature.Columns, sqlgraph.NewFieldSpec(temperature.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Temperature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, temperature.FieldID)
		for _, f := range fields {
			if !temperature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != temperature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.IDOras(); ok {
		_spec.SetField(temperature.FieldIDOras, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedIDOras(); ok {
		_spec.AddField(temperature.FieldIDOras, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Valoare(); ok {
		_spec.SetField(temperature.FieldValoare, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedValoare(); ok {
		_spec.AddField(temperature.FieldValoare, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Timestamp(); ok {
		_spec.SetField(temperature.FieldTimestamp, field.TypeTime, value)
	}
	_node = &Temperature{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temperature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
