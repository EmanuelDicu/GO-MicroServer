// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"tema-sprc-go/ent/city"
	"tema-sprc-go/ent/country"
	"tema-sprc-go/ent/predicate"
	"tema-sprc-go/ent/temperature"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCity        = "City"
	TypeCountry     = "Country"
	TypeTemperature = "Temperature"
)

// CityMutation represents an operation that mutates the City nodes in the graph.
type CityMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	id_tara              *int
	addid_tara           *int
	_Nume_oras           *string
	_Latitudine          *float64
	add_Latitudine       *float64
	_Longitudine         *float64
	add_Longitudine      *float64
	clearedFields        map[string]struct{}
	_Temperatures        map[int]struct{}
	removed_Temperatures map[int]struct{}
	cleared_Temperatures bool
	done                 bool
	oldValue             func(context.Context) (*City, error)
	predicates           []predicate.City
}

var _ ent.Mutation = (*CityMutation)(nil)

// cityOption allows management of the mutation configuration using functional options.
type cityOption func(*CityMutation)

// newCityMutation creates new mutation for the City entity.
func newCityMutation(c config, op Op, opts ...cityOption) *CityMutation {
	m := &CityMutation{
		config:        c,
		op:            op,
		typ:           TypeCity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCityID sets the ID field of the mutation.
func withCityID(id int) cityOption {
	return func(m *CityMutation) {
		var (
			err   error
			once  sync.Once
			value *City
		)
		m.oldValue = func(ctx context.Context) (*City, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().City.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCity sets the old City of the mutation.
func withCity(node *City) cityOption {
	return func(m *CityMutation) {
		m.oldValue = func(context.Context) (*City, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().City.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIDTara sets the "id_tara" field.
func (m *CityMutation) SetIDTara(i int) {
	m.id_tara = &i
	m.addid_tara = nil
}

// IDTara returns the value of the "id_tara" field in the mutation.
func (m *CityMutation) IDTara() (r int, exists bool) {
	v := m.id_tara
	if v == nil {
		return
	}
	return *v, true
}

// OldIDTara returns the old "id_tara" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldIDTara(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDTara is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDTara requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDTara: %w", err)
	}
	return oldValue.IDTara, nil
}

// AddIDTara adds i to the "id_tara" field.
func (m *CityMutation) AddIDTara(i int) {
	if m.addid_tara != nil {
		*m.addid_tara += i
	} else {
		m.addid_tara = &i
	}
}

// AddedIDTara returns the value that was added to the "id_tara" field in this mutation.
func (m *CityMutation) AddedIDTara() (r int, exists bool) {
	v := m.addid_tara
	if v == nil {
		return
	}
	return *v, true
}

// ResetIDTara resets all changes to the "id_tara" field.
func (m *CityMutation) ResetIDTara() {
	m.id_tara = nil
	m.addid_tara = nil
}

// SetNumeOras sets the "Nume_oras" field.
func (m *CityMutation) SetNumeOras(s string) {
	m._Nume_oras = &s
}

// NumeOras returns the value of the "Nume_oras" field in the mutation.
func (m *CityMutation) NumeOras() (r string, exists bool) {
	v := m._Nume_oras
	if v == nil {
		return
	}
	return *v, true
}

// OldNumeOras returns the old "Nume_oras" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldNumeOras(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumeOras is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumeOras requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumeOras: %w", err)
	}
	return oldValue.NumeOras, nil
}

// ResetNumeOras resets all changes to the "Nume_oras" field.
func (m *CityMutation) ResetNumeOras() {
	m._Nume_oras = nil
}

// SetLatitudine sets the "Latitudine" field.
func (m *CityMutation) SetLatitudine(f float64) {
	m._Latitudine = &f
	m.add_Latitudine = nil
}

// Latitudine returns the value of the "Latitudine" field in the mutation.
func (m *CityMutation) Latitudine() (r float64, exists bool) {
	v := m._Latitudine
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitudine returns the old "Latitudine" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldLatitudine(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitudine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitudine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitudine: %w", err)
	}
	return oldValue.Latitudine, nil
}

// AddLatitudine adds f to the "Latitudine" field.
func (m *CityMutation) AddLatitudine(f float64) {
	if m.add_Latitudine != nil {
		*m.add_Latitudine += f
	} else {
		m.add_Latitudine = &f
	}
}

// AddedLatitudine returns the value that was added to the "Latitudine" field in this mutation.
func (m *CityMutation) AddedLatitudine() (r float64, exists bool) {
	v := m.add_Latitudine
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitudine resets all changes to the "Latitudine" field.
func (m *CityMutation) ResetLatitudine() {
	m._Latitudine = nil
	m.add_Latitudine = nil
}

// SetLongitudine sets the "Longitudine" field.
func (m *CityMutation) SetLongitudine(f float64) {
	m._Longitudine = &f
	m.add_Longitudine = nil
}

// Longitudine returns the value of the "Longitudine" field in the mutation.
func (m *CityMutation) Longitudine() (r float64, exists bool) {
	v := m._Longitudine
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitudine returns the old "Longitudine" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldLongitudine(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitudine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitudine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitudine: %w", err)
	}
	return oldValue.Longitudine, nil
}

// AddLongitudine adds f to the "Longitudine" field.
func (m *CityMutation) AddLongitudine(f float64) {
	if m.add_Longitudine != nil {
		*m.add_Longitudine += f
	} else {
		m.add_Longitudine = &f
	}
}

// AddedLongitudine returns the value that was added to the "Longitudine" field in this mutation.
func (m *CityMutation) AddedLongitudine() (r float64, exists bool) {
	v := m.add_Longitudine
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitudine resets all changes to the "Longitudine" field.
func (m *CityMutation) ResetLongitudine() {
	m._Longitudine = nil
	m.add_Longitudine = nil
}

// AddTemperatureIDs adds the "Temperatures" edge to the Temperature entity by ids.
func (m *CityMutation) AddTemperatureIDs(ids ...int) {
	if m._Temperatures == nil {
		m._Temperatures = make(map[int]struct{})
	}
	for i := range ids {
		m._Temperatures[ids[i]] = struct{}{}
	}
}

// ClearTemperatures clears the "Temperatures" edge to the Temperature entity.
func (m *CityMutation) ClearTemperatures() {
	m.cleared_Temperatures = true
}

// TemperaturesCleared reports if the "Temperatures" edge to the Temperature entity was cleared.
func (m *CityMutation) TemperaturesCleared() bool {
	return m.cleared_Temperatures
}

// RemoveTemperatureIDs removes the "Temperatures" edge to the Temperature entity by IDs.
func (m *CityMutation) RemoveTemperatureIDs(ids ...int) {
	if m.removed_Temperatures == nil {
		m.removed_Temperatures = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._Temperatures, ids[i])
		m.removed_Temperatures[ids[i]] = struct{}{}
	}
}

// RemovedTemperatures returns the removed IDs of the "Temperatures" edge to the Temperature entity.
func (m *CityMutation) RemovedTemperaturesIDs() (ids []int) {
	for id := range m.removed_Temperatures {
		ids = append(ids, id)
	}
	return
}

// TemperaturesIDs returns the "Temperatures" edge IDs in the mutation.
func (m *CityMutation) TemperaturesIDs() (ids []int) {
	for id := range m._Temperatures {
		ids = append(ids, id)
	}
	return
}

// ResetTemperatures resets all changes to the "Temperatures" edge.
func (m *CityMutation) ResetTemperatures() {
	m._Temperatures = nil
	m.cleared_Temperatures = false
	m.removed_Temperatures = nil
}

// Where appends a list predicates to the CityMutation builder.
func (m *CityMutation) Where(ps ...predicate.City) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.City, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (City).
func (m *CityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CityMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.id_tara != nil {
		fields = append(fields, city.FieldIDTara)
	}
	if m._Nume_oras != nil {
		fields = append(fields, city.FieldNumeOras)
	}
	if m._Latitudine != nil {
		fields = append(fields, city.FieldLatitudine)
	}
	if m._Longitudine != nil {
		fields = append(fields, city.FieldLongitudine)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case city.FieldIDTara:
		return m.IDTara()
	case city.FieldNumeOras:
		return m.NumeOras()
	case city.FieldLatitudine:
		return m.Latitudine()
	case city.FieldLongitudine:
		return m.Longitudine()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case city.FieldIDTara:
		return m.OldIDTara(ctx)
	case city.FieldNumeOras:
		return m.OldNumeOras(ctx)
	case city.FieldLatitudine:
		return m.OldLatitudine(ctx)
	case city.FieldLongitudine:
		return m.OldLongitudine(ctx)
	}
	return nil, fmt.Errorf("unknown City field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case city.FieldIDTara:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDTara(v)
		return nil
	case city.FieldNumeOras:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumeOras(v)
		return nil
	case city.FieldLatitudine:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitudine(v)
		return nil
	case city.FieldLongitudine:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitudine(v)
		return nil
	}
	return fmt.Errorf("unknown City field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CityMutation) AddedFields() []string {
	var fields []string
	if m.addid_tara != nil {
		fields = append(fields, city.FieldIDTara)
	}
	if m.add_Latitudine != nil {
		fields = append(fields, city.FieldLatitudine)
	}
	if m.add_Longitudine != nil {
		fields = append(fields, city.FieldLongitudine)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case city.FieldIDTara:
		return m.AddedIDTara()
	case city.FieldLatitudine:
		return m.AddedLatitudine()
	case city.FieldLongitudine:
		return m.AddedLongitudine()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case city.FieldIDTara:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIDTara(v)
		return nil
	case city.FieldLatitudine:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitudine(v)
		return nil
	case city.FieldLongitudine:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitudine(v)
		return nil
	}
	return fmt.Errorf("unknown City numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown City nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CityMutation) ResetField(name string) error {
	switch name {
	case city.FieldIDTara:
		m.ResetIDTara()
		return nil
	case city.FieldNumeOras:
		m.ResetNumeOras()
		return nil
	case city.FieldLatitudine:
		m.ResetLatitudine()
		return nil
	case city.FieldLongitudine:
		m.ResetLongitudine()
		return nil
	}
	return fmt.Errorf("unknown City field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Temperatures != nil {
		edges = append(edges, city.EdgeTemperatures)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case city.EdgeTemperatures:
		ids := make([]ent.Value, 0, len(m._Temperatures))
		for id := range m._Temperatures {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Temperatures != nil {
		edges = append(edges, city.EdgeTemperatures)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case city.EdgeTemperatures:
		ids := make([]ent.Value, 0, len(m.removed_Temperatures))
		for id := range m.removed_Temperatures {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Temperatures {
		edges = append(edges, city.EdgeTemperatures)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CityMutation) EdgeCleared(name string) bool {
	switch name {
	case city.EdgeTemperatures:
		return m.cleared_Temperatures
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown City unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CityMutation) ResetEdge(name string) error {
	switch name {
	case city.EdgeTemperatures:
		m.ResetTemperatures()
		return nil
	}
	return fmt.Errorf("unknown City edge %s", name)
}

// CountryMutation represents an operation that mutates the Country nodes in the graph.
type CountryMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_Nume_tara      *string
	_Latitudine     *float64
	add_Latitudine  *float64
	_Longitudine    *float64
	add_Longitudine *float64
	clearedFields   map[string]struct{}
	_Cities         map[int]struct{}
	removed_Cities  map[int]struct{}
	cleared_Cities  bool
	done            bool
	oldValue        func(context.Context) (*Country, error)
	predicates      []predicate.Country
}

var _ ent.Mutation = (*CountryMutation)(nil)

// countryOption allows management of the mutation configuration using functional options.
type countryOption func(*CountryMutation)

// newCountryMutation creates new mutation for the Country entity.
func newCountryMutation(c config, op Op, opts ...countryOption) *CountryMutation {
	m := &CountryMutation{
		config:        c,
		op:            op,
		typ:           TypeCountry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCountryID sets the ID field of the mutation.
func withCountryID(id int) countryOption {
	return func(m *CountryMutation) {
		var (
			err   error
			once  sync.Once
			value *Country
		)
		m.oldValue = func(ctx context.Context) (*Country, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Country.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCountry sets the old Country of the mutation.
func withCountry(node *Country) countryOption {
	return func(m *CountryMutation) {
		m.oldValue = func(context.Context) (*Country, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CountryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CountryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CountryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CountryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Country.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumeTara sets the "Nume_tara" field.
func (m *CountryMutation) SetNumeTara(s string) {
	m._Nume_tara = &s
}

// NumeTara returns the value of the "Nume_tara" field in the mutation.
func (m *CountryMutation) NumeTara() (r string, exists bool) {
	v := m._Nume_tara
	if v == nil {
		return
	}
	return *v, true
}

// OldNumeTara returns the old "Nume_tara" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldNumeTara(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumeTara is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumeTara requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumeTara: %w", err)
	}
	return oldValue.NumeTara, nil
}

// ResetNumeTara resets all changes to the "Nume_tara" field.
func (m *CountryMutation) ResetNumeTara() {
	m._Nume_tara = nil
}

// SetLatitudine sets the "Latitudine" field.
func (m *CountryMutation) SetLatitudine(f float64) {
	m._Latitudine = &f
	m.add_Latitudine = nil
}

// Latitudine returns the value of the "Latitudine" field in the mutation.
func (m *CountryMutation) Latitudine() (r float64, exists bool) {
	v := m._Latitudine
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitudine returns the old "Latitudine" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldLatitudine(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitudine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitudine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitudine: %w", err)
	}
	return oldValue.Latitudine, nil
}

// AddLatitudine adds f to the "Latitudine" field.
func (m *CountryMutation) AddLatitudine(f float64) {
	if m.add_Latitudine != nil {
		*m.add_Latitudine += f
	} else {
		m.add_Latitudine = &f
	}
}

// AddedLatitudine returns the value that was added to the "Latitudine" field in this mutation.
func (m *CountryMutation) AddedLatitudine() (r float64, exists bool) {
	v := m.add_Latitudine
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitudine resets all changes to the "Latitudine" field.
func (m *CountryMutation) ResetLatitudine() {
	m._Latitudine = nil
	m.add_Latitudine = nil
}

// SetLongitudine sets the "Longitudine" field.
func (m *CountryMutation) SetLongitudine(f float64) {
	m._Longitudine = &f
	m.add_Longitudine = nil
}

// Longitudine returns the value of the "Longitudine" field in the mutation.
func (m *CountryMutation) Longitudine() (r float64, exists bool) {
	v := m._Longitudine
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitudine returns the old "Longitudine" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldLongitudine(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitudine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitudine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitudine: %w", err)
	}
	return oldValue.Longitudine, nil
}

// AddLongitudine adds f to the "Longitudine" field.
func (m *CountryMutation) AddLongitudine(f float64) {
	if m.add_Longitudine != nil {
		*m.add_Longitudine += f
	} else {
		m.add_Longitudine = &f
	}
}

// AddedLongitudine returns the value that was added to the "Longitudine" field in this mutation.
func (m *CountryMutation) AddedLongitudine() (r float64, exists bool) {
	v := m.add_Longitudine
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitudine resets all changes to the "Longitudine" field.
func (m *CountryMutation) ResetLongitudine() {
	m._Longitudine = nil
	m.add_Longitudine = nil
}

// AddCityIDs adds the "Cities" edge to the City entity by ids.
func (m *CountryMutation) AddCityIDs(ids ...int) {
	if m._Cities == nil {
		m._Cities = make(map[int]struct{})
	}
	for i := range ids {
		m._Cities[ids[i]] = struct{}{}
	}
}

// ClearCities clears the "Cities" edge to the City entity.
func (m *CountryMutation) ClearCities() {
	m.cleared_Cities = true
}

// CitiesCleared reports if the "Cities" edge to the City entity was cleared.
func (m *CountryMutation) CitiesCleared() bool {
	return m.cleared_Cities
}

// RemoveCityIDs removes the "Cities" edge to the City entity by IDs.
func (m *CountryMutation) RemoveCityIDs(ids ...int) {
	if m.removed_Cities == nil {
		m.removed_Cities = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._Cities, ids[i])
		m.removed_Cities[ids[i]] = struct{}{}
	}
}

// RemovedCities returns the removed IDs of the "Cities" edge to the City entity.
func (m *CountryMutation) RemovedCitiesIDs() (ids []int) {
	for id := range m.removed_Cities {
		ids = append(ids, id)
	}
	return
}

// CitiesIDs returns the "Cities" edge IDs in the mutation.
func (m *CountryMutation) CitiesIDs() (ids []int) {
	for id := range m._Cities {
		ids = append(ids, id)
	}
	return
}

// ResetCities resets all changes to the "Cities" edge.
func (m *CountryMutation) ResetCities() {
	m._Cities = nil
	m.cleared_Cities = false
	m.removed_Cities = nil
}

// Where appends a list predicates to the CountryMutation builder.
func (m *CountryMutation) Where(ps ...predicate.Country) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CountryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CountryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Country, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CountryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CountryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Country).
func (m *CountryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CountryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Nume_tara != nil {
		fields = append(fields, country.FieldNumeTara)
	}
	if m._Latitudine != nil {
		fields = append(fields, country.FieldLatitudine)
	}
	if m._Longitudine != nil {
		fields = append(fields, country.FieldLongitudine)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CountryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case country.FieldNumeTara:
		return m.NumeTara()
	case country.FieldLatitudine:
		return m.Latitudine()
	case country.FieldLongitudine:
		return m.Longitudine()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CountryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case country.FieldNumeTara:
		return m.OldNumeTara(ctx)
	case country.FieldLatitudine:
		return m.OldLatitudine(ctx)
	case country.FieldLongitudine:
		return m.OldLongitudine(ctx)
	}
	return nil, fmt.Errorf("unknown Country field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case country.FieldNumeTara:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumeTara(v)
		return nil
	case country.FieldLatitudine:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitudine(v)
		return nil
	case country.FieldLongitudine:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitudine(v)
		return nil
	}
	return fmt.Errorf("unknown Country field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CountryMutation) AddedFields() []string {
	var fields []string
	if m.add_Latitudine != nil {
		fields = append(fields, country.FieldLatitudine)
	}
	if m.add_Longitudine != nil {
		fields = append(fields, country.FieldLongitudine)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CountryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case country.FieldLatitudine:
		return m.AddedLatitudine()
	case country.FieldLongitudine:
		return m.AddedLongitudine()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case country.FieldLatitudine:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitudine(v)
		return nil
	case country.FieldLongitudine:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitudine(v)
		return nil
	}
	return fmt.Errorf("unknown Country numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CountryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CountryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CountryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Country nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CountryMutation) ResetField(name string) error {
	switch name {
	case country.FieldNumeTara:
		m.ResetNumeTara()
		return nil
	case country.FieldLatitudine:
		m.ResetLatitudine()
		return nil
	case country.FieldLongitudine:
		m.ResetLongitudine()
		return nil
	}
	return fmt.Errorf("unknown Country field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CountryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Cities != nil {
		edges = append(edges, country.EdgeCities)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CountryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case country.EdgeCities:
		ids := make([]ent.Value, 0, len(m._Cities))
		for id := range m._Cities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CountryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Cities != nil {
		edges = append(edges, country.EdgeCities)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CountryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case country.EdgeCities:
		ids := make([]ent.Value, 0, len(m.removed_Cities))
		for id := range m.removed_Cities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CountryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Cities {
		edges = append(edges, country.EdgeCities)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CountryMutation) EdgeCleared(name string) bool {
	switch name {
	case country.EdgeCities:
		return m.cleared_Cities
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CountryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Country unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CountryMutation) ResetEdge(name string) error {
	switch name {
	case country.EdgeCities:
		m.ResetCities()
		return nil
	}
	return fmt.Errorf("unknown Country edge %s", name)
}

// TemperatureMutation represents an operation that mutates the Temperature nodes in the graph.
type TemperatureMutation struct {
	config
	op            Op
	typ           string
	id            *int
	id_oras       *int
	addid_oras    *int
	_Valoare      *float64
	add_Valoare   *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Temperature, error)
	predicates    []predicate.Temperature
}

var _ ent.Mutation = (*TemperatureMutation)(nil)

// temperatureOption allows management of the mutation configuration using functional options.
type temperatureOption func(*TemperatureMutation)

// newTemperatureMutation creates new mutation for the Temperature entity.
func newTemperatureMutation(c config, op Op, opts ...temperatureOption) *TemperatureMutation {
	m := &TemperatureMutation{
		config:        c,
		op:            op,
		typ:           TypeTemperature,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTemperatureID sets the ID field of the mutation.
func withTemperatureID(id int) temperatureOption {
	return func(m *TemperatureMutation) {
		var (
			err   error
			once  sync.Once
			value *Temperature
		)
		m.oldValue = func(ctx context.Context) (*Temperature, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Temperature.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTemperature sets the old Temperature of the mutation.
func withTemperature(node *Temperature) temperatureOption {
	return func(m *TemperatureMutation) {
		m.oldValue = func(context.Context) (*Temperature, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TemperatureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TemperatureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TemperatureMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TemperatureMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Temperature.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIDOras sets the "id_oras" field.
func (m *TemperatureMutation) SetIDOras(i int) {
	m.id_oras = &i
	m.addid_oras = nil
}

// IDOras returns the value of the "id_oras" field in the mutation.
func (m *TemperatureMutation) IDOras() (r int, exists bool) {
	v := m.id_oras
	if v == nil {
		return
	}
	return *v, true
}

// OldIDOras returns the old "id_oras" field's value of the Temperature entity.
// If the Temperature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemperatureMutation) OldIDOras(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDOras is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDOras requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDOras: %w", err)
	}
	return oldValue.IDOras, nil
}

// AddIDOras adds i to the "id_oras" field.
func (m *TemperatureMutation) AddIDOras(i int) {
	if m.addid_oras != nil {
		*m.addid_oras += i
	} else {
		m.addid_oras = &i
	}
}

// AddedIDOras returns the value that was added to the "id_oras" field in this mutation.
func (m *TemperatureMutation) AddedIDOras() (r int, exists bool) {
	v := m.addid_oras
	if v == nil {
		return
	}
	return *v, true
}

// ResetIDOras resets all changes to the "id_oras" field.
func (m *TemperatureMutation) ResetIDOras() {
	m.id_oras = nil
	m.addid_oras = nil
}

// SetValoare sets the "Valoare" field.
func (m *TemperatureMutation) SetValoare(f float64) {
	m._Valoare = &f
	m.add_Valoare = nil
}

// Valoare returns the value of the "Valoare" field in the mutation.
func (m *TemperatureMutation) Valoare() (r float64, exists bool) {
	v := m._Valoare
	if v == nil {
		return
	}
	return *v, true
}

// OldValoare returns the old "Valoare" field's value of the Temperature entity.
// If the Temperature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemperatureMutation) OldValoare(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValoare is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValoare requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValoare: %w", err)
	}
	return oldValue.Valoare, nil
}

// AddValoare adds f to the "Valoare" field.
func (m *TemperatureMutation) AddValoare(f float64) {
	if m.add_Valoare != nil {
		*m.add_Valoare += f
	} else {
		m.add_Valoare = &f
	}
}

// AddedValoare returns the value that was added to the "Valoare" field in this mutation.
func (m *TemperatureMutation) AddedValoare() (r float64, exists bool) {
	v := m.add_Valoare
	if v == nil {
		return
	}
	return *v, true
}

// ResetValoare resets all changes to the "Valoare" field.
func (m *TemperatureMutation) ResetValoare() {
	m._Valoare = nil
	m.add_Valoare = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *TemperatureMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *TemperatureMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the Temperature entity.
// If the Temperature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemperatureMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *TemperatureMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the TemperatureMutation builder.
func (m *TemperatureMutation) Where(ps ...predicate.Temperature) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TemperatureMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TemperatureMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Temperature, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TemperatureMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TemperatureMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Temperature).
func (m *TemperatureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TemperatureMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.id_oras != nil {
		fields = append(fields, temperature.FieldIDOras)
	}
	if m._Valoare != nil {
		fields = append(fields, temperature.FieldValoare)
	}
	if m._Timestamp != nil {
		fields = append(fields, temperature.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TemperatureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case temperature.FieldIDOras:
		return m.IDOras()
	case temperature.FieldValoare:
		return m.Valoare()
	case temperature.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TemperatureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case temperature.FieldIDOras:
		return m.OldIDOras(ctx)
	case temperature.FieldValoare:
		return m.OldValoare(ctx)
	case temperature.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown Temperature field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TemperatureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case temperature.FieldIDOras:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDOras(v)
		return nil
	case temperature.FieldValoare:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValoare(v)
		return nil
	case temperature.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown Temperature field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TemperatureMutation) AddedFields() []string {
	var fields []string
	if m.addid_oras != nil {
		fields = append(fields, temperature.FieldIDOras)
	}
	if m.add_Valoare != nil {
		fields = append(fields, temperature.FieldValoare)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TemperatureMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case temperature.FieldIDOras:
		return m.AddedIDOras()
	case temperature.FieldValoare:
		return m.AddedValoare()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TemperatureMutation) AddField(name string, value ent.Value) error {
	switch name {
	case temperature.FieldIDOras:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIDOras(v)
		return nil
	case temperature.FieldValoare:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValoare(v)
		return nil
	}
	return fmt.Errorf("unknown Temperature numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TemperatureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TemperatureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TemperatureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Temperature nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TemperatureMutation) ResetField(name string) error {
	switch name {
	case temperature.FieldIDOras:
		m.ResetIDOras()
		return nil
	case temperature.FieldValoare:
		m.ResetValoare()
		return nil
	case temperature.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown Temperature field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TemperatureMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TemperatureMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TemperatureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TemperatureMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TemperatureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TemperatureMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TemperatureMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Temperature unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TemperatureMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Temperature edge %s", name)
}
