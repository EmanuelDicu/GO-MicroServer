// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tema-sprc-go/ent/city"
	"tema-sprc-go/ent/predicate"
	"tema-sprc-go/ent/temperature"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CityUpdate is the builder for updating City entities.
type CityUpdate struct {
	config
	hooks    []Hook
	mutation *CityMutation
}

// Where appends a list predicates to the CityUpdate builder.
func (cu *CityUpdate) Where(ps ...predicate.City) *CityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetIDTara sets the "id_tara" field.
func (cu *CityUpdate) SetIDTara(i int) *CityUpdate {
	cu.mutation.ResetIDTara()
	cu.mutation.SetIDTara(i)
	return cu
}

// SetNillableIDTara sets the "id_tara" field if the given value is not nil.
func (cu *CityUpdate) SetNillableIDTara(i *int) *CityUpdate {
	if i != nil {
		cu.SetIDTara(*i)
	}
	return cu
}

// AddIDTara adds i to the "id_tara" field.
func (cu *CityUpdate) AddIDTara(i int) *CityUpdate {
	cu.mutation.AddIDTara(i)
	return cu
}

// SetNumeOras sets the "Nume_oras" field.
func (cu *CityUpdate) SetNumeOras(s string) *CityUpdate {
	cu.mutation.SetNumeOras(s)
	return cu
}

// SetNillableNumeOras sets the "Nume_oras" field if the given value is not nil.
func (cu *CityUpdate) SetNillableNumeOras(s *string) *CityUpdate {
	if s != nil {
		cu.SetNumeOras(*s)
	}
	return cu
}

// SetLatitudine sets the "Latitudine" field.
func (cu *CityUpdate) SetLatitudine(f float64) *CityUpdate {
	cu.mutation.ResetLatitudine()
	cu.mutation.SetLatitudine(f)
	return cu
}

// SetNillableLatitudine sets the "Latitudine" field if the given value is not nil.
func (cu *CityUpdate) SetNillableLatitudine(f *float64) *CityUpdate {
	if f != nil {
		cu.SetLatitudine(*f)
	}
	return cu
}

// AddLatitudine adds f to the "Latitudine" field.
func (cu *CityUpdate) AddLatitudine(f float64) *CityUpdate {
	cu.mutation.AddLatitudine(f)
	return cu
}

// SetLongitudine sets the "Longitudine" field.
func (cu *CityUpdate) SetLongitudine(f float64) *CityUpdate {
	cu.mutation.ResetLongitudine()
	cu.mutation.SetLongitudine(f)
	return cu
}

// SetNillableLongitudine sets the "Longitudine" field if the given value is not nil.
func (cu *CityUpdate) SetNillableLongitudine(f *float64) *CityUpdate {
	if f != nil {
		cu.SetLongitudine(*f)
	}
	return cu
}

// AddLongitudine adds f to the "Longitudine" field.
func (cu *CityUpdate) AddLongitudine(f float64) *CityUpdate {
	cu.mutation.AddLongitudine(f)
	return cu
}

// AddTemperatureIDs adds the "Temperatures" edge to the Temperature entity by IDs.
func (cu *CityUpdate) AddTemperatureIDs(ids ...int) *CityUpdate {
	cu.mutation.AddTemperatureIDs(ids...)
	return cu
}

// AddTemperatures adds the "Temperatures" edges to the Temperature entity.
func (cu *CityUpdate) AddTemperatures(t ...*Temperature) *CityUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTemperatureIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cu *CityUpdate) Mutation() *CityMutation {
	return cu.mutation
}

// ClearTemperatures clears all "Temperatures" edges to the Temperature entity.
func (cu *CityUpdate) ClearTemperatures() *CityUpdate {
	cu.mutation.ClearTemperatures()
	return cu
}

// RemoveTemperatureIDs removes the "Temperatures" edge to Temperature entities by IDs.
func (cu *CityUpdate) RemoveTemperatureIDs(ids ...int) *CityUpdate {
	cu.mutation.RemoveTemperatureIDs(ids...)
	return cu
}

// RemoveTemperatures removes "Temperatures" edges to Temperature entities.
func (cu *CityUpdate) RemoveTemperatures(t ...*Temperature) *CityUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTemperatureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(city.Table, city.Columns, sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.IDTara(); ok {
		_spec.SetField(city.FieldIDTara, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIDTara(); ok {
		_spec.AddField(city.FieldIDTara, field.TypeInt, value)
	}
	if value, ok := cu.mutation.NumeOras(); ok {
		_spec.SetField(city.FieldNumeOras, field.TypeString, value)
	}
	if value, ok := cu.mutation.Latitudine(); ok {
		_spec.SetField(city.FieldLatitudine, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedLatitudine(); ok {
		_spec.AddField(city.FieldLatitudine, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.Longitudine(); ok {
		_spec.SetField(city.FieldLongitudine, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedLongitudine(); ok {
		_spec.AddField(city.FieldLongitudine, field.TypeFloat64, value)
	}
	if cu.mutation.TemperaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.TemperaturesTable,
			Columns: []string{city.TemperaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(temperature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTemperaturesIDs(); len(nodes) > 0 && !cu.mutation.TemperaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.TemperaturesTable,
			Columns: []string{city.TemperaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(temperature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TemperaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.TemperaturesTable,
			Columns: []string{city.TemperaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(temperature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CityUpdateOne is the builder for updating a single City entity.
type CityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CityMutation
}

// SetIDTara sets the "id_tara" field.
func (cuo *CityUpdateOne) SetIDTara(i int) *CityUpdateOne {
	cuo.mutation.ResetIDTara()
	cuo.mutation.SetIDTara(i)
	return cuo
}

// SetNillableIDTara sets the "id_tara" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableIDTara(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetIDTara(*i)
	}
	return cuo
}

// AddIDTara adds i to the "id_tara" field.
func (cuo *CityUpdateOne) AddIDTara(i int) *CityUpdateOne {
	cuo.mutation.AddIDTara(i)
	return cuo
}

// SetNumeOras sets the "Nume_oras" field.
func (cuo *CityUpdateOne) SetNumeOras(s string) *CityUpdateOne {
	cuo.mutation.SetNumeOras(s)
	return cuo
}

// SetNillableNumeOras sets the "Nume_oras" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableNumeOras(s *string) *CityUpdateOne {
	if s != nil {
		cuo.SetNumeOras(*s)
	}
	return cuo
}

// SetLatitudine sets the "Latitudine" field.
func (cuo *CityUpdateOne) SetLatitudine(f float64) *CityUpdateOne {
	cuo.mutation.ResetLatitudine()
	cuo.mutation.SetLatitudine(f)
	return cuo
}

// SetNillableLatitudine sets the "Latitudine" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableLatitudine(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetLatitudine(*f)
	}
	return cuo
}

// AddLatitudine adds f to the "Latitudine" field.
func (cuo *CityUpdateOne) AddLatitudine(f float64) *CityUpdateOne {
	cuo.mutation.AddLatitudine(f)
	return cuo
}

// SetLongitudine sets the "Longitudine" field.
func (cuo *CityUpdateOne) SetLongitudine(f float64) *CityUpdateOne {
	cuo.mutation.ResetLongitudine()
	cuo.mutation.SetLongitudine(f)
	return cuo
}

// SetNillableLongitudine sets the "Longitudine" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableLongitudine(f *float64) *CityUpdateOne {
	if f != nil {
		cuo.SetLongitudine(*f)
	}
	return cuo
}

// AddLongitudine adds f to the "Longitudine" field.
func (cuo *CityUpdateOne) AddLongitudine(f float64) *CityUpdateOne {
	cuo.mutation.AddLongitudine(f)
	return cuo
}

// AddTemperatureIDs adds the "Temperatures" edge to the Temperature entity by IDs.
func (cuo *CityUpdateOne) AddTemperatureIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.AddTemperatureIDs(ids...)
	return cuo
}

// AddTemperatures adds the "Temperatures" edges to the Temperature entity.
func (cuo *CityUpdateOne) AddTemperatures(t ...*Temperature) *CityUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTemperatureIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cuo *CityUpdateOne) Mutation() *CityMutation {
	return cuo.mutation
}

// ClearTemperatures clears all "Temperatures" edges to the Temperature entity.
func (cuo *CityUpdateOne) ClearTemperatures() *CityUpdateOne {
	cuo.mutation.ClearTemperatures()
	return cuo
}

// RemoveTemperatureIDs removes the "Temperatures" edge to Temperature entities by IDs.
func (cuo *CityUpdateOne) RemoveTemperatureIDs(ids ...int) *CityUpdateOne {
	cuo.mutation.RemoveTemperatureIDs(ids...)
	return cuo
}

// RemoveTemperatures removes "Temperatures" edges to Temperature entities.
func (cuo *CityUpdateOne) RemoveTemperatures(t ...*Temperature) *CityUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTemperatureIDs(ids...)
}

// Where appends a list predicates to the CityUpdate builder.
func (cuo *CityUpdateOne) Where(ps ...predicate.City) *CityUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CityUpdateOne) Select(field string, fields ...string) *CityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated City entity.
func (cuo *CityUpdateOne) Save(ctx context.Context) (*City, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CityUpdateOne) SaveX(ctx context.Context) *City {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CityUpdateOne) sqlSave(ctx context.Context) (_node *City, err error) {
	_spec := sqlgraph.NewUpdateSpec(city.Table, city.Columns, sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "City.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, city.FieldID)
		for _, f := range fields {
			if !city.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != city.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.IDTara(); ok {
		_spec.SetField(city.FieldIDTara, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIDTara(); ok {
		_spec.AddField(city.FieldIDTara, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.NumeOras(); ok {
		_spec.SetField(city.FieldNumeOras, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Latitudine(); ok {
		_spec.SetField(city.FieldLatitudine, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedLatitudine(); ok {
		_spec.AddField(city.FieldLatitudine, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.Longitudine(); ok {
		_spec.SetField(city.FieldLongitudine, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedLongitudine(); ok {
		_spec.AddField(city.FieldLongitudine, field.TypeFloat64, value)
	}
	if cuo.mutation.TemperaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.TemperaturesTable,
			Columns: []string{city.TemperaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(temperature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTemperaturesIDs(); len(nodes) > 0 && !cuo.mutation.TemperaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.TemperaturesTable,
			Columns: []string{city.TemperaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(temperature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TemperaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.TemperaturesTable,
			Columns: []string{city.TemperaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(temperature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &City{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
