// Code generated by ent, DO NOT EDIT.

package temperature

import (
	"tema-sprc-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Temperature {
	return predicate.Temperature(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Temperature {
	return predicate.Temperature(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Temperature {
	return predicate.Temperature(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Temperature {
	return predicate.Temperature(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Temperature {
	return predicate.Temperature(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Temperature {
	return predicate.Temperature(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Temperature {
	return predicate.Temperature(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Temperature {
	return predicate.Temperature(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Temperature {
	return predicate.Temperature(sql.FieldLTE(FieldID, id))
}

// IDOras applies equality check predicate on the "id_oras" field. It's identical to IDOrasEQ.
func IDOras(v int) predicate.Temperature {
	return predicate.Temperature(sql.FieldEQ(FieldIDOras, v))
}

// Valoare applies equality check predicate on the "Valoare" field. It's identical to ValoareEQ.
func Valoare(v float64) predicate.Temperature {
	return predicate.Temperature(sql.FieldEQ(FieldValoare, v))
}

// Timestamp applies equality check predicate on the "Timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Temperature {
	return predicate.Temperature(sql.FieldEQ(FieldTimestamp, v))
}

// IDOrasEQ applies the EQ predicate on the "id_oras" field.
func IDOrasEQ(v int) predicate.Temperature {
	return predicate.Temperature(sql.FieldEQ(FieldIDOras, v))
}

// IDOrasNEQ applies the NEQ predicate on the "id_oras" field.
func IDOrasNEQ(v int) predicate.Temperature {
	return predicate.Temperature(sql.FieldNEQ(FieldIDOras, v))
}

// IDOrasIn applies the In predicate on the "id_oras" field.
func IDOrasIn(vs ...int) predicate.Temperature {
	return predicate.Temperature(sql.FieldIn(FieldIDOras, vs...))
}

// IDOrasNotIn applies the NotIn predicate on the "id_oras" field.
func IDOrasNotIn(vs ...int) predicate.Temperature {
	return predicate.Temperature(sql.FieldNotIn(FieldIDOras, vs...))
}

// IDOrasGT applies the GT predicate on the "id_oras" field.
func IDOrasGT(v int) predicate.Temperature {
	return predicate.Temperature(sql.FieldGT(FieldIDOras, v))
}

// IDOrasGTE applies the GTE predicate on the "id_oras" field.
func IDOrasGTE(v int) predicate.Temperature {
	return predicate.Temperature(sql.FieldGTE(FieldIDOras, v))
}

// IDOrasLT applies the LT predicate on the "id_oras" field.
func IDOrasLT(v int) predicate.Temperature {
	return predicate.Temperature(sql.FieldLT(FieldIDOras, v))
}

// IDOrasLTE applies the LTE predicate on the "id_oras" field.
func IDOrasLTE(v int) predicate.Temperature {
	return predicate.Temperature(sql.FieldLTE(FieldIDOras, v))
}

// ValoareEQ applies the EQ predicate on the "Valoare" field.
func ValoareEQ(v float64) predicate.Temperature {
	return predicate.Temperature(sql.FieldEQ(FieldValoare, v))
}

// ValoareNEQ applies the NEQ predicate on the "Valoare" field.
func ValoareNEQ(v float64) predicate.Temperature {
	return predicate.Temperature(sql.FieldNEQ(FieldValoare, v))
}

// ValoareIn applies the In predicate on the "Valoare" field.
func ValoareIn(vs ...float64) predicate.Temperature {
	return predicate.Temperature(sql.FieldIn(FieldValoare, vs...))
}

// ValoareNotIn applies the NotIn predicate on the "Valoare" field.
func ValoareNotIn(vs ...float64) predicate.Temperature {
	return predicate.Temperature(sql.FieldNotIn(FieldValoare, vs...))
}

// ValoareGT applies the GT predicate on the "Valoare" field.
func ValoareGT(v float64) predicate.Temperature {
	return predicate.Temperature(sql.FieldGT(FieldValoare, v))
}

// ValoareGTE applies the GTE predicate on the "Valoare" field.
func ValoareGTE(v float64) predicate.Temperature {
	return predicate.Temperature(sql.FieldGTE(FieldValoare, v))
}

// ValoareLT applies the LT predicate on the "Valoare" field.
func ValoareLT(v float64) predicate.Temperature {
	return predicate.Temperature(sql.FieldLT(FieldValoare, v))
}

// ValoareLTE applies the LTE predicate on the "Valoare" field.
func ValoareLTE(v float64) predicate.Temperature {
	return predicate.Temperature(sql.FieldLTE(FieldValoare, v))
}

// TimestampEQ applies the EQ predicate on the "Timestamp" field.
func TimestampEQ(v time.Time) predicate.Temperature {
	return predicate.Temperature(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "Timestamp" field.
func TimestampNEQ(v time.Time) predicate.Temperature {
	return predicate.Temperature(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "Timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Temperature {
	return predicate.Temperature(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "Timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Temperature {
	return predicate.Temperature(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "Timestamp" field.
func TimestampGT(v time.Time) predicate.Temperature {
	return predicate.Temperature(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "Timestamp" field.
func TimestampGTE(v time.Time) predicate.Temperature {
	return predicate.Temperature(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "Timestamp" field.
func TimestampLT(v time.Time) predicate.Temperature {
	return predicate.Temperature(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "Timestamp" field.
func TimestampLTE(v time.Time) predicate.Temperature {
	return predicate.Temperature(sql.FieldLTE(FieldTimestamp, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Temperature) predicate.Temperature {
	return predicate.Temperature(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Temperature) predicate.Temperature {
	return predicate.Temperature(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Temperature) predicate.Temperature {
	return predicate.Temperature(sql.NotPredicates(p))
}
