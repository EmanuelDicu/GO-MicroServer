// Code generated by ent, DO NOT EDIT.

package country

import (
	"tema-sprc-go/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldID, id))
}

// NumeTara applies equality check predicate on the "Nume_tara" field. It's identical to NumeTaraEQ.
func NumeTara(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldNumeTara, v))
}

// Latitudine applies equality check predicate on the "Latitudine" field. It's identical to LatitudineEQ.
func Latitudine(v float64) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldLatitudine, v))
}

// Longitudine applies equality check predicate on the "Longitudine" field. It's identical to LongitudineEQ.
func Longitudine(v float64) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldLongitudine, v))
}

// NumeTaraEQ applies the EQ predicate on the "Nume_tara" field.
func NumeTaraEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldNumeTara, v))
}

// NumeTaraNEQ applies the NEQ predicate on the "Nume_tara" field.
func NumeTaraNEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldNumeTara, v))
}

// NumeTaraIn applies the In predicate on the "Nume_tara" field.
func NumeTaraIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldNumeTara, vs...))
}

// NumeTaraNotIn applies the NotIn predicate on the "Nume_tara" field.
func NumeTaraNotIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldNumeTara, vs...))
}

// NumeTaraGT applies the GT predicate on the "Nume_tara" field.
func NumeTaraGT(v string) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldNumeTara, v))
}

// NumeTaraGTE applies the GTE predicate on the "Nume_tara" field.
func NumeTaraGTE(v string) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldNumeTara, v))
}

// NumeTaraLT applies the LT predicate on the "Nume_tara" field.
func NumeTaraLT(v string) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldNumeTara, v))
}

// NumeTaraLTE applies the LTE predicate on the "Nume_tara" field.
func NumeTaraLTE(v string) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldNumeTara, v))
}

// NumeTaraContains applies the Contains predicate on the "Nume_tara" field.
func NumeTaraContains(v string) predicate.Country {
	return predicate.Country(sql.FieldContains(FieldNumeTara, v))
}

// NumeTaraHasPrefix applies the HasPrefix predicate on the "Nume_tara" field.
func NumeTaraHasPrefix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasPrefix(FieldNumeTara, v))
}

// NumeTaraHasSuffix applies the HasSuffix predicate on the "Nume_tara" field.
func NumeTaraHasSuffix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasSuffix(FieldNumeTara, v))
}

// NumeTaraEqualFold applies the EqualFold predicate on the "Nume_tara" field.
func NumeTaraEqualFold(v string) predicate.Country {
	return predicate.Country(sql.FieldEqualFold(FieldNumeTara, v))
}

// NumeTaraContainsFold applies the ContainsFold predicate on the "Nume_tara" field.
func NumeTaraContainsFold(v string) predicate.Country {
	return predicate.Country(sql.FieldContainsFold(FieldNumeTara, v))
}

// LatitudineEQ applies the EQ predicate on the "Latitudine" field.
func LatitudineEQ(v float64) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldLatitudine, v))
}

// LatitudineNEQ applies the NEQ predicate on the "Latitudine" field.
func LatitudineNEQ(v float64) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldLatitudine, v))
}

// LatitudineIn applies the In predicate on the "Latitudine" field.
func LatitudineIn(vs ...float64) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldLatitudine, vs...))
}

// LatitudineNotIn applies the NotIn predicate on the "Latitudine" field.
func LatitudineNotIn(vs ...float64) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldLatitudine, vs...))
}

// LatitudineGT applies the GT predicate on the "Latitudine" field.
func LatitudineGT(v float64) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldLatitudine, v))
}

// LatitudineGTE applies the GTE predicate on the "Latitudine" field.
func LatitudineGTE(v float64) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldLatitudine, v))
}

// LatitudineLT applies the LT predicate on the "Latitudine" field.
func LatitudineLT(v float64) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldLatitudine, v))
}

// LatitudineLTE applies the LTE predicate on the "Latitudine" field.
func LatitudineLTE(v float64) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldLatitudine, v))
}

// LongitudineEQ applies the EQ predicate on the "Longitudine" field.
func LongitudineEQ(v float64) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldLongitudine, v))
}

// LongitudineNEQ applies the NEQ predicate on the "Longitudine" field.
func LongitudineNEQ(v float64) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldLongitudine, v))
}

// LongitudineIn applies the In predicate on the "Longitudine" field.
func LongitudineIn(vs ...float64) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldLongitudine, vs...))
}

// LongitudineNotIn applies the NotIn predicate on the "Longitudine" field.
func LongitudineNotIn(vs ...float64) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldLongitudine, vs...))
}

// LongitudineGT applies the GT predicate on the "Longitudine" field.
func LongitudineGT(v float64) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldLongitudine, v))
}

// LongitudineGTE applies the GTE predicate on the "Longitudine" field.
func LongitudineGTE(v float64) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldLongitudine, v))
}

// LongitudineLT applies the LT predicate on the "Longitudine" field.
func LongitudineLT(v float64) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldLongitudine, v))
}

// LongitudineLTE applies the LTE predicate on the "Longitudine" field.
func LongitudineLTE(v float64) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldLongitudine, v))
}

// HasCities applies the HasEdge predicate on the "Cities" edge.
func HasCities() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CitiesTable, CitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCitiesWith applies the HasEdge predicate on the "Cities" edge with a given conditions (other predicates).
func HasCitiesWith(preds ...predicate.City) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := newCitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Country) predicate.Country {
	return predicate.Country(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Country) predicate.Country {
	return predicate.Country(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Country) predicate.Country {
	return predicate.Country(sql.NotPredicates(p))
}
